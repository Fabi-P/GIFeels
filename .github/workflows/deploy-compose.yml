name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  push_to_registry:
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push new docker image, skip for manual redeploy other than 'latest'
      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          file: Dockerfile
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
  deploy:
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
       # Copy docker-compose file to target
        - name: copy files to target server via scp
          uses: appleboy/scp-action@v0.1.3
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            port: 22
            key: ${{ secrets.EC2_SSH_KEY }}
            source: "./compose.prod.yml"
            target: "~/.deploy/${{ github.event.repository.name }}/"
        - name: SSH into EC2 and Deploy
          uses: appleboy/ssh-action@v0.1.6
          env:
            APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
            USERNAME: ${{ secrets.EC2_USER }} 
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_SSH_KEY }}
            envs: APPTOKEN,USERNAME
            script: |
                echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
                cd ~/.deploy/${{ github.event.repository.name }}            
                GIPHY_API_KEY=${{ secrets.GIPHY_API_KEY }} \
                SECRET_KEY=${{ secrets.SECRET_KEY }} \
                GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
                GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
                GOOGLE_CLIENT_DOMAIN=${{ secrets.GOOGLE_CLIENT_DOMAIN }} \
                MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
                CONNECTION_STRING=${{ secrets.CONNECTION_STRING }} \
                ENVIRONMENT=PRODUCTION \
                docker compose -f ./compose.prod.yml pull
                docker compose -f ./compose.prod.yml up -d --remove-orphans --force-recreate
